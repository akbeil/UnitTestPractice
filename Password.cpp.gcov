        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <cctype>
        -:    4:
        -:    5:using std::string;
        -:    6:
        -:    7:/*
        -:    8:  The function receives a string counts how many times the same character 
        -:    9:  occurs at the beginning of the string, before any other characters (or the
        -:   10:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   11:  'z' and any ASCII characters are allowed.
        -:   12:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 16 returned 100% blocks executed 100%
       16:   13:int Password::count_leading_characters(string phrase){
       16:   14:  int repetition = 1;
       16:   15:  int index = 0;
       31:   16:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 31
branch  1 taken 30 (fallthrough)
branch  2 taken 1
call    3 returned 30
call    4 returned 30
branch  5 taken 15 (fallthrough)
branch  6 taken 15
branch  7 taken 15
branch  8 taken 16 (fallthrough)
       15:   17:    repetition++;
       15:   18:    index++;
        -:   19:  }
       16:   20:  return repetition;
        -:   21:}
        -:   22:
        -:   23:
        -:   24:/* Implementation A
        -:   25:bool Password::has_mixed_case(string str)
        -:   26:{
        -:   27:  bool has_lower = false;
        -:   28:  bool has_upper = false;
        -:   29:  for (char ch : str)
        -:   30:  {
        -:   31:    if (std::islower(ch))
        -:   32:    {
        -:   33:      has_lower = true;
        -:   34:    }
        -:   35:    else if (std::isupper(ch))
        -:   36:    {
        -:   37:      has_upper = true;
        -:   38:    }
        -:   39:  }
        -:   40:  return has_lower && has_upper;
        -:   41:}
        -:   42:*/
        -:   43:/*
        -:   44:// Implementation B
        -:   45:bool Password::has_mixed_case(string str)
        -:   46:{
        -:   47:  int count_lower = 0;
        -:   48:  for (int i = 0; i < str.length(); i++)
        -:   49:  {
        -:   50:    if (str[i] >= 'a' && str[i] <= 'z')
        -:   51:    {
        -:   52:      count_lower++;
        -:   53:    }
        -:   54:  }
        -:   55:  return count_lower > 0 && count_lower < str.length();
        -:   56:}
        -:   57:*/
        -:   58:/*
        -:   59:// Implementation C
        -:   60:bool Password::has_mixed_case(string str)
        -:   61:{
        -:   62:  bool lower = false;
        -:   63:  bool upper = false;
        -:   64:  for (int i = 0; i < str.length(); i++)
        -:   65:  {
        -:   66:    if (str[i] >= 'a' && str[i] <= 'z')
        -:   67:    {
        -:   68:      lower = true;
        -:   69:    }
        -:   70:    else if (str[i] >= 'A' && str[i] <= 'Z')
        -:   71:    {
        -:   72:      upper = true;
        -:   73:    }
        -:   74:  }
        -:   75:  return upper && lower;
        -:   76:}
        -:   77:*/
        -:   78:/*
        -:   79:// Implementation D
        -:   80:#include <cctype>
        -:   81:bool Password::has_mixed_case(string str)
        -:   82:{
        -:   83:  bool is_lower = false;
        -:   84:  bool is_upper = false;
        -:   85:  for (char c : str)
        -:   86:  {
        -:   87:    if (std::islower(c))
        -:   88:    {
        -:   89:      is_lower = true;
        -:   90:    }
        -:   91:    else
        -:   92:    {
        -:   93:      is_upper = true;
        -:   94:    }
        -:   95:  }
        -:   96:  return is_lower && is_upper;
        -:   97:}
        -:   98:*/
        -:   99:// Implementation E
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 13 returned 100% blocks executed 100%
       13:  100:bool Password::has_mixed_case(string str)
        -:  101:{
       13:  102:  bool found = false;
       30:  103:  for(char c : str){
call    0 returned 13
call    1 returned 13
call    2 returned 28
call    3 returned 17
call    4 returned 30
branch  5 taken 28
branch  6 taken 2 (fallthrough)
       28:  104:    if( !found && c >= 'A' && c <= 'Z' ){
branch  0 taken 16 (fallthrough)
branch  1 taken 12
branch  2 taken 16 (fallthrough)
branch  3 taken 0
branch  4 taken 12 (fallthrough)
branch  5 taken 4
       12:  105:      found = true;
        -:  106:    }
       16:  107:    else if( found && c >= 'a' && c <= 'z'){
branch  0 taken 12 (fallthrough)
branch  1 taken 4
branch  2 taken 11 (fallthrough)
branch  3 taken 1
branch  4 taken 11 (fallthrough)
branch  5 taken 0
       11:  108:      return true;
        -:  109:    }
        -:  110:  }
        2:  111:  return false;
        -:  112:}
        -:  113:/*
        -:  114:bool Password::has_mixed_case(string phrase) {
        -:  115:  bool mixed = false;
        -:  116:  bool uppercase = false;
        -:  117:  bool lowercase = false;
        -:  118:
        -:  119:  for(int i=0; i < phrase.length(); i++) {
        -:  120:    if(phrase[i] >= 65 && phrase[i] <= 90) {
        -:  121:      uppercase = true;
        -:  122:    }
        -:  123:    if(phrase[i] >= 97 && phrase[i] <= 122) {
        -:  124:      lowercase = true;
        -:  125:    }
        -:  126:  }
        -:  127:  if(uppercase == true && lowercase == true){
        -:  128:    mixed = true;
        -:  129:  }
        -:  130:
        -:  131:  return mixed;
        -:  132:}
        -:  133:*/
        -:  134:
        -:  135:/*
        -:  136:  constructor sets the default password to "ChicoCA-95929"
        -:  137:  */
function _ZN8PasswordC2Ev called 17 returned 100% blocks executed 53%
       17:  138:  Password::Password() {
call    0 returned 17
       17:  139:    pass_history.push_back("ChicoCA-95926");
call    0 returned 17
call    1 returned 17
branch  2 taken 17 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 17
branch  5 taken 17 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 17
call    8 returned 17
call    9 never executed
call   10 never executed
        -:  140:
       17:  141:  }
call    0 never executed
        -:  142:
        -:  143:  /*
        -:  144:  receives a password and sets the latest in pass_history to it if and only
        -:  145:  if it meets all criteria:
        -:  146:    1. The password is at least 8 letters long, but no longer than 20
        -:  147:    2. It has no more than 3 of the same leading characters
        -:  148:    3. It has mixed case (at least one upper case and at least one lower case)
        -:  149:    4. It was not a previous password in the history
        -:  150:  */
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8 returned 100% blocks executed 76%
        8:  151:  void Password::set(string pass) {
        8:  152:    bool prevPass = true;
        8:  153:    bool firstThree = false;
       8*:  154:    if(pass.length() >= 8 && pass.length() <= 20 && (count_leading_characters(pass) <= 3) && (has_mixed_case(pass) == true)) {
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0
call    6 returned 8
branch  7 taken 8 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 8
branch 10 taken 8 (fallthrough)
branch 11 taken 0 (throw)
branch 12 taken 8 (fallthrough)
branch 13 taken 0
call   14 returned 8
branch 15 taken 8 (fallthrough)
branch 16 taken 0 (throw)
call   17 returned 8
branch 18 taken 8 (fallthrough)
branch 19 taken 0
branch 20 taken 8 (fallthrough)
branch 21 taken 0
call   22 returned 8
branch 23 taken 8 (fallthrough)
branch 24 taken 0
call   25 returned 8
branch 26 taken 8 (fallthrough)
branch 27 taken 0
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
        8:  155:      firstThree = true;
        -:  156:    }
       28:  157:    for(int i=0; i < pass_history.size(); i++) {
call    0 returned 28
branch  1 taken 20
branch  2 taken 8 (fallthrough)
       20:  158:      if(pass.compare(pass_history[i]) == 0) {
call    0 returned 20
call    1 returned 20
branch  2 taken 0 (fallthrough)
branch  3 taken 20
    #####:  159:        prevPass = false;
        -:  160:      }
        -:  161:    }
        8:  162:    if(prevPass == true && firstThree == true) {
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 8 (fallthrough)
branch  3 taken 0
        8:  163:      pass_history.push_back(pass);
call    0 returned 8
        -:  164:    }
        8:  165:  }
        -:  166:
        -:  167:  /*
        -:  168:  receives a string and authenticates it against the latest password in the
        -:  169:  pass_history, returning true for an exact match or false when it does not match
        -:  170:  or if a password has not been set.
        -:  171:  */
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 100%
        4:  172:  bool Password::authenticate(string pass) {
        4:  173:    int latest = pass_history.size() - 1;
call    0 returned 4
        4:  174:    if(pass.compare(pass_history[latest]) == 0) {
call    0 returned 4
call    1 returned 4
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        2:  175:        return true;
        -:  176:    }
        2:  177:    return false;
        -:  178:  }
